{"ast":null,"code":"// Mock food database with common foods and their nutritional information\nconst FOOD_DATABASE = [{\n  name: 'Pancakes with blueberries & syrup',\n  keywords: ['pancake', 'blueberry', 'syrup', 'breakfast'],\n  nutritionalInfo: {\n    calories: 615,\n    protein: 11,\n    carbs: 93,\n    fat: 21\n  },\n  healthScore: 7\n}, {\n  name: 'Mixed Green Salad',\n  keywords: ['salad', 'lettuce', 'tomato', 'vegetables', 'green'],\n  nutritionalInfo: {\n    calories: 150,\n    protein: 5,\n    carbs: 12,\n    fat: 8\n  },\n  healthScore: 9\n}, {\n  name: 'Chicken Breast',\n  keywords: ['chicken', 'meat', 'protein'],\n  nutritionalInfo: {\n    calories: 284,\n    protein: 53,\n    carbs: 0,\n    fat: 6\n  },\n  healthScore: 8\n}, {\n  name: 'Hamburger',\n  keywords: ['burger', 'hamburger', 'bun', 'meat'],\n  nutritionalInfo: {\n    calories: 540,\n    protein: 25,\n    carbs: 40,\n    fat: 31\n  },\n  healthScore: 5\n}, {\n  name: 'Pizza Slice',\n  keywords: ['pizza', 'cheese', 'slice'],\n  nutritionalInfo: {\n    calories: 285,\n    protein: 12,\n    carbs: 36,\n    fat: 10\n  },\n  healthScore: 6\n}, {\n  name: 'Apple',\n  keywords: ['apple', 'fruit'],\n  nutritionalInfo: {\n    calories: 95,\n    protein: 0,\n    carbs: 25,\n    fat: 0\n  },\n  healthScore: 10\n}, {\n  name: 'Banana',\n  keywords: ['banana', 'fruit'],\n  nutritionalInfo: {\n    calories: 105,\n    protein: 1,\n    carbs: 27,\n    fat: 0\n  },\n  healthScore: 9\n}, {\n  name: 'Oatmeal',\n  keywords: ['oatmeal', 'oats', 'breakfast', 'bowl'],\n  nutritionalInfo: {\n    calories: 158,\n    protein: 6,\n    carbs: 28,\n    fat: 3\n  },\n  healthScore: 8\n}, {\n  name: 'Grilled Salmon',\n  keywords: ['salmon', 'fish', 'seafood'],\n  nutritionalInfo: {\n    calories: 231,\n    protein: 25,\n    carbs: 0,\n    fat: 14\n  },\n  healthScore: 9\n}, {\n  name: 'Pasta with Tomato Sauce',\n  keywords: ['pasta', 'spaghetti', 'tomato', 'sauce'],\n  nutritionalInfo: {\n    calories: 220,\n    protein: 8,\n    carbs: 43,\n    fat: 1\n  },\n  healthScore: 7\n}];\n\n// Simulate image analysis delay\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n// Mock food recognition function\nexport const recognizeFood = async imageData => {\n  // Simulate processing time\n  await delay(2000 + Math.random() * 2000);\n\n  // For demo purposes, we'll randomly select a food or use a default\n  // In a real app, this would use computer vision APIs like Google Vision, \n  // Clarifai, or custom ML models\n\n  let recognizedFood;\n\n  // Simple heuristic: try to detect pancakes if the image looks brownish\n  // This is just for demo - real implementation would use proper image analysis\n  try {\n    // Create a simple color analysis\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    const img = new Image();\n    img.src = imageData;\n    await new Promise(resolve => {\n      img.onload = resolve;\n    });\n    canvas.width = 100;\n    canvas.height = 100;\n    ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(img, 0, 0, 100, 100);\n    const imageDataPixels = ctx === null || ctx === void 0 ? void 0 : ctx.getImageData(0, 0, 100, 100);\n    let brownishPixels = 0;\n    let greenishPixels = 0;\n    if (imageDataPixels) {\n      for (let i = 0; i < imageDataPixels.data.length; i += 4) {\n        const r = imageDataPixels.data[i];\n        const g = imageDataPixels.data[i + 1];\n        const b = imageDataPixels.data[i + 2];\n\n        // Detect brownish colors (potential pancakes/cooked food)\n        if (r > 100 && g > 60 && b < 100 && r > g && g > b) {\n          brownishPixels++;\n        }\n\n        // Detect greenish colors (potential salad/vegetables)\n        if (g > r && g > b && g > 80) {\n          greenishPixels++;\n        }\n      }\n    }\n\n    // Choose food based on color analysis\n    if (brownishPixels > greenishPixels && brownishPixels > 50) {\n      recognizedFood = FOOD_DATABASE.find(f => f.keywords.includes('pancake')) || FOOD_DATABASE[0];\n    } else if (greenishPixels > 100) {\n      recognizedFood = FOOD_DATABASE.find(f => f.keywords.includes('salad')) || FOOD_DATABASE[1];\n    } else {\n      // Default to a random food\n      recognizedFood = FOOD_DATABASE[Math.floor(Math.random() * FOOD_DATABASE.length)];\n    }\n  } catch (error) {\n    // If image analysis fails, use a default\n    recognizedFood = FOOD_DATABASE[0]; // Default to pancakes\n  }\n\n  // Create FoodItem with unique ID and current timestamp\n  const foodItem = {\n    id: `food_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n    name: recognizedFood.name,\n    image: imageData,\n    // Store the captured image\n    nutritionalInfo: recognizedFood.nutritionalInfo,\n    quantity: 1,\n    timestamp: new Date(),\n    healthScore: recognizedFood.healthScore\n  };\n  return foodItem;\n};\n\n// Alternative food search function for manual food entry\nexport const searchFood = query => {\n  const lowerQuery = query.toLowerCase();\n  return FOOD_DATABASE.filter(food => food.name.toLowerCase().includes(lowerQuery) || food.keywords.some(keyword => keyword.includes(lowerQuery)));\n};\n\n// Get random food suggestions\nexport const getFoodSuggestions = (count = 5) => {\n  const shuffled = [...FOOD_DATABASE].sort(() => 0.5 - Math.random());\n  return shuffled.slice(0, count);\n};","map":{"version":3,"names":["FOOD_DATABASE","name","keywords","nutritionalInfo","calories","protein","carbs","fat","healthScore","delay","ms","Promise","resolve","setTimeout","recognizeFood","imageData","Math","random","recognizedFood","canvas","document","createElement","ctx","getContext","img","Image","src","onload","width","height","drawImage","imageDataPixels","getImageData","brownishPixels","greenishPixels","i","data","length","r","g","b","find","f","includes","floor","error","foodItem","id","Date","now","toString","substr","image","quantity","timestamp","searchFood","query","lowerQuery","toLowerCase","filter","food","some","keyword","getFoodSuggestions","count","shuffled","sort","slice"],"sources":["/workspace/src/utils/foodRecognition.ts"],"sourcesContent":["import { FoodItem } from '../types';\n\n// Mock food database with common foods and their nutritional information\nconst FOOD_DATABASE = [\n  {\n    name: 'Pancakes with blueberries & syrup',\n    keywords: ['pancake', 'blueberry', 'syrup', 'breakfast'],\n    nutritionalInfo: {\n      calories: 615,\n      protein: 11,\n      carbs: 93,\n      fat: 21\n    },\n    healthScore: 7\n  },\n  {\n    name: 'Mixed Green Salad',\n    keywords: ['salad', 'lettuce', 'tomato', 'vegetables', 'green'],\n    nutritionalInfo: {\n      calories: 150,\n      protein: 5,\n      carbs: 12,\n      fat: 8\n    },\n    healthScore: 9\n  },\n  {\n    name: 'Chicken Breast',\n    keywords: ['chicken', 'meat', 'protein'],\n    nutritionalInfo: {\n      calories: 284,\n      protein: 53,\n      carbs: 0,\n      fat: 6\n    },\n    healthScore: 8\n  },\n  {\n    name: 'Hamburger',\n    keywords: ['burger', 'hamburger', 'bun', 'meat'],\n    nutritionalInfo: {\n      calories: 540,\n      protein: 25,\n      carbs: 40,\n      fat: 31\n    },\n    healthScore: 5\n  },\n  {\n    name: 'Pizza Slice',\n    keywords: ['pizza', 'cheese', 'slice'],\n    nutritionalInfo: {\n      calories: 285,\n      protein: 12,\n      carbs: 36,\n      fat: 10\n    },\n    healthScore: 6\n  },\n  {\n    name: 'Apple',\n    keywords: ['apple', 'fruit'],\n    nutritionalInfo: {\n      calories: 95,\n      protein: 0,\n      carbs: 25,\n      fat: 0\n    },\n    healthScore: 10\n  },\n  {\n    name: 'Banana',\n    keywords: ['banana', 'fruit'],\n    nutritionalInfo: {\n      calories: 105,\n      protein: 1,\n      carbs: 27,\n      fat: 0\n    },\n    healthScore: 9\n  },\n  {\n    name: 'Oatmeal',\n    keywords: ['oatmeal', 'oats', 'breakfast', 'bowl'],\n    nutritionalInfo: {\n      calories: 158,\n      protein: 6,\n      carbs: 28,\n      fat: 3\n    },\n    healthScore: 8\n  },\n  {\n    name: 'Grilled Salmon',\n    keywords: ['salmon', 'fish', 'seafood'],\n    nutritionalInfo: {\n      calories: 231,\n      protein: 25,\n      carbs: 0,\n      fat: 14\n    },\n    healthScore: 9\n  },\n  {\n    name: 'Pasta with Tomato Sauce',\n    keywords: ['pasta', 'spaghetti', 'tomato', 'sauce'],\n    nutritionalInfo: {\n      calories: 220,\n      protein: 8,\n      carbs: 43,\n      fat: 1\n    },\n    healthScore: 7\n  }\n];\n\n// Simulate image analysis delay\nconst delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\n// Mock food recognition function\nexport const recognizeFood = async (imageData: string): Promise<FoodItem> => {\n  // Simulate processing time\n  await delay(2000 + Math.random() * 2000);\n\n  // For demo purposes, we'll randomly select a food or use a default\n  // In a real app, this would use computer vision APIs like Google Vision, \n  // Clarifai, or custom ML models\n  \n  let recognizedFood;\n  \n  // Simple heuristic: try to detect pancakes if the image looks brownish\n  // This is just for demo - real implementation would use proper image analysis\n  try {\n    // Create a simple color analysis\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    const img = new Image();\n    \n    img.src = imageData;\n    await new Promise(resolve => {\n      img.onload = resolve;\n    });\n    \n    canvas.width = 100;\n    canvas.height = 100;\n    ctx?.drawImage(img, 0, 0, 100, 100);\n    \n    const imageDataPixels = ctx?.getImageData(0, 0, 100, 100);\n    let brownishPixels = 0;\n    let greenishPixels = 0;\n    \n    if (imageDataPixels) {\n      for (let i = 0; i < imageDataPixels.data.length; i += 4) {\n        const r = imageDataPixels.data[i];\n        const g = imageDataPixels.data[i + 1];\n        const b = imageDataPixels.data[i + 2];\n        \n        // Detect brownish colors (potential pancakes/cooked food)\n        if (r > 100 && g > 60 && b < 100 && r > g && g > b) {\n          brownishPixels++;\n        }\n        \n        // Detect greenish colors (potential salad/vegetables)\n        if (g > r && g > b && g > 80) {\n          greenishPixels++;\n        }\n      }\n    }\n    \n    // Choose food based on color analysis\n    if (brownishPixels > greenishPixels && brownishPixels > 50) {\n      recognizedFood = FOOD_DATABASE.find(f => f.keywords.includes('pancake')) || FOOD_DATABASE[0];\n    } else if (greenishPixels > 100) {\n      recognizedFood = FOOD_DATABASE.find(f => f.keywords.includes('salad')) || FOOD_DATABASE[1];\n    } else {\n      // Default to a random food\n      recognizedFood = FOOD_DATABASE[Math.floor(Math.random() * FOOD_DATABASE.length)];\n    }\n    \n  } catch (error) {\n    // If image analysis fails, use a default\n    recognizedFood = FOOD_DATABASE[0]; // Default to pancakes\n  }\n\n  // Create FoodItem with unique ID and current timestamp\n  const foodItem: FoodItem = {\n    id: `food_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n    name: recognizedFood.name,\n    image: imageData, // Store the captured image\n    nutritionalInfo: recognizedFood.nutritionalInfo,\n    quantity: 1,\n    timestamp: new Date(),\n    healthScore: recognizedFood.healthScore\n  };\n\n  return foodItem;\n};\n\n// Alternative food search function for manual food entry\nexport const searchFood = (query: string): typeof FOOD_DATABASE => {\n  const lowerQuery = query.toLowerCase();\n  return FOOD_DATABASE.filter(food => \n    food.name.toLowerCase().includes(lowerQuery) ||\n    food.keywords.some(keyword => keyword.includes(lowerQuery))\n  );\n};\n\n// Get random food suggestions\nexport const getFoodSuggestions = (count: number = 5): typeof FOOD_DATABASE => {\n  const shuffled = [...FOOD_DATABASE].sort(() => 0.5 - Math.random());\n  return shuffled.slice(0, count);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}