{"ast":null,"code":"var _jsxFileName = \"/workspace/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Dashboard from './components/Dashboard';\nimport CameraScreen from './components/CameraScreen';\nimport FoodDetailScreen from './components/FoodDetailScreen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultUser = {\n  name: 'Abhishek',\n  dailyGoals: {\n    calories: 2000,\n    protein: 150,\n    carbs: 250,\n    fat: 67\n  }\n};\nfunction App() {\n  _s();\n  const [appState, setAppState] = useState({\n    currentScreen: 'dashboard',\n    currentUser: defaultUser,\n    todaysFoods: []\n  });\n\n  // Load data from localStorage on app start\n  useEffect(() => {\n    const savedData = localStorage.getItem('calorieTrackerData');\n    if (savedData) {\n      try {\n        const parsedData = JSON.parse(savedData);\n        setAppState(prevState => {\n          var _parsedData$todaysFoo;\n          return {\n            ...prevState,\n            todaysFoods: ((_parsedData$todaysFoo = parsedData.todaysFoods) === null || _parsedData$todaysFoo === void 0 ? void 0 : _parsedData$todaysFoo.map(food => ({\n              ...food,\n              timestamp: new Date(food.timestamp)\n            }))) || []\n          };\n        });\n      } catch (error) {\n        console.error('Failed to load saved data:', error);\n      }\n    }\n  }, []);\n\n  // Save data to localStorage whenever todaysFoods changes\n  useEffect(() => {\n    localStorage.setItem('calorieTrackerData', JSON.stringify({\n      todaysFoods: appState.todaysFoods\n    }));\n  }, [appState.todaysFoods]);\n  const navigateToScreen = screen => {\n    setAppState(prev => ({\n      ...prev,\n      currentScreen: screen\n    }));\n  };\n  const addFood = food => {\n    setAppState(prev => ({\n      ...prev,\n      todaysFoods: [...prev.todaysFoods, food],\n      currentScreen: 'dashboard'\n    }));\n  };\n  const selectFood = food => {\n    setAppState(prev => ({\n      ...prev,\n      selectedFood: food,\n      currentScreen: 'foodDetail'\n    }));\n  };\n  const setCameraCapture = imageData => {\n    setAppState(prev => ({\n      ...prev,\n      cameraCapture: imageData\n    }));\n  };\n  const renderCurrentScreen = () => {\n    switch (appState.currentScreen) {\n      case 'dashboard':\n        return /*#__PURE__*/_jsxDEV(Dashboard, {\n          user: appState.currentUser,\n          todaysFoods: appState.todaysFoods,\n          onNavigate: navigateToScreen,\n          onSelectFood: selectFood\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this);\n      case 'camera':\n        return /*#__PURE__*/_jsxDEV(CameraScreen, {\n          onNavigate: navigateToScreen,\n          onFoodCaptured: addFood,\n          onCameraCapture: setCameraCapture,\n          capturedImage: appState.cameraCapture\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this);\n      case 'foodDetail':\n        return /*#__PURE__*/_jsxDEV(FoodDetailScreen, {\n          food: appState.selectedFood,\n          onNavigate: navigateToScreen,\n          onUpdateFood: addFood\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(Dashboard, {\n          user: appState.currentUser,\n          todaysFoods: appState.todaysFoods,\n          onNavigate: navigateToScreen,\n          onSelectFood: selectFood\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-50\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-md mx-auto bg-white min-h-screen shadow-lg\",\n      children: renderCurrentScreen()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"7r4+SE5oc5Y7oGnokb53PS+kHvQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Dashboard","CameraScreen","FoodDetailScreen","jsxDEV","_jsxDEV","defaultUser","name","dailyGoals","calories","protein","carbs","fat","App","_s","appState","setAppState","currentScreen","currentUser","todaysFoods","savedData","localStorage","getItem","parsedData","JSON","parse","prevState","_parsedData$todaysFoo","map","food","timestamp","Date","error","console","setItem","stringify","navigateToScreen","screen","prev","addFood","selectFood","selectedFood","setCameraCapture","imageData","cameraCapture","renderCurrentScreen","user","onNavigate","onSelectFood","fileName","_jsxFileName","lineNumber","columnNumber","onFoodCaptured","onCameraCapture","capturedImage","onUpdateFood","className","children","_c","$RefreshReg$"],"sources":["/workspace/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Dashboard from './components/Dashboard';\nimport CameraScreen from './components/CameraScreen';\nimport FoodDetailScreen from './components/FoodDetailScreen';\nimport { AppState, FoodItem, UserProfile, Screen } from './types';\n\nconst defaultUser: UserProfile = {\n  name: 'Abhishek',\n  dailyGoals: {\n    calories: 2000,\n    protein: 150,\n    carbs: 250,\n    fat: 67\n  }\n};\n\nfunction App() {\n  const [appState, setAppState] = useState<AppState>({\n    currentScreen: 'dashboard',\n    currentUser: defaultUser,\n    todaysFoods: []\n  });\n\n  // Load data from localStorage on app start\n  useEffect(() => {\n    const savedData = localStorage.getItem('calorieTrackerData');\n    if (savedData) {\n      try {\n        const parsedData = JSON.parse(savedData);\n        setAppState(prevState => ({\n          ...prevState,\n          todaysFoods: parsedData.todaysFoods?.map((food: any) => ({\n            ...food,\n            timestamp: new Date(food.timestamp)\n          })) || []\n        }));\n      } catch (error) {\n        console.error('Failed to load saved data:', error);\n      }\n    }\n  }, []);\n\n  // Save data to localStorage whenever todaysFoods changes\n  useEffect(() => {\n    localStorage.setItem('calorieTrackerData', JSON.stringify({\n      todaysFoods: appState.todaysFoods\n    }));\n  }, [appState.todaysFoods]);\n\n  const navigateToScreen = (screen: Screen) => {\n    setAppState(prev => ({ ...prev, currentScreen: screen }));\n  };\n\n  const addFood = (food: FoodItem) => {\n    setAppState(prev => ({\n      ...prev,\n      todaysFoods: [...prev.todaysFoods, food],\n      currentScreen: 'dashboard'\n    }));\n  };\n\n  const selectFood = (food: FoodItem) => {\n    setAppState(prev => ({\n      ...prev,\n      selectedFood: food,\n      currentScreen: 'foodDetail'\n    }));\n  };\n\n  const setCameraCapture = (imageData: string) => {\n    setAppState(prev => ({ ...prev, cameraCapture: imageData }));\n  };\n\n  const renderCurrentScreen = () => {\n    switch (appState.currentScreen) {\n      case 'dashboard':\n        return (\n          <Dashboard \n            user={appState.currentUser}\n            todaysFoods={appState.todaysFoods}\n            onNavigate={navigateToScreen}\n            onSelectFood={selectFood}\n          />\n        );\n      case 'camera':\n        return (\n          <CameraScreen\n            onNavigate={navigateToScreen}\n            onFoodCaptured={addFood}\n            onCameraCapture={setCameraCapture}\n            capturedImage={appState.cameraCapture}\n          />\n        );\n      case 'foodDetail':\n        return (\n          <FoodDetailScreen\n            food={appState.selectedFood!}\n            onNavigate={navigateToScreen}\n            onUpdateFood={addFood}\n          />\n        );\n      default:\n        return (\n          <Dashboard \n            user={appState.currentUser}\n            todaysFoods={appState.todaysFoods}\n            onNavigate={navigateToScreen}\n            onSelectFood={selectFood}\n          />\n        );\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-md mx-auto bg-white min-h-screen shadow-lg\">\n        {renderCurrentScreen()}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}